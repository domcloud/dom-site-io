[{"title":"Producing a Cost-Effective Service","type":0,"sectionRef":"#","url":"/blog/producing-cost-effective-service","content":"","keywords":""},{"title":"Change in Plans​","type":1,"pageTitle":"Producing a Cost-Effective Service","url":"/blog/producing-cost-effective-service#change-in-plans","content":""},{"title":"Free Plan​","type":1,"pageTitle":"Producing a Cost-Effective Service","url":"/blog/producing-cost-effective-service#free-plan","content":"The free plan storage cap is increased from 1 GB to 1.5 GB, while total of website is reduced from 4 to 3. I think this is a fair tradeoff, because most websites nowadays are quite heavy with depedencies, and storage is quite cheap compared to computing power. "},{"title":"Lite Plan​","type":1,"pageTitle":"Producing a Cost-Effective Service","url":"/blog/producing-cost-effective-service#lite-plan","content":"Due to high processing fees, I think it's make sense to increase the price from 2 USD to 3 USD a month. With that in mind, these limits are increased: Storage cap is increased from 2 GB to 3 GB.Data transfer is increased from 2 GB to 5 GB.Total of website is increased from 5 to 6. "},{"title":"The Enforcing of Limits​","type":1,"pageTitle":"Producing a Cost-Effective Service","url":"/blog/producing-cost-effective-service#the-enforcing-of-limits","content":"Limits in the past is not enforced because how little the users was and support was very limited. Now with more users, I think it's time to enforce the limits so I can keep the platform stay on good performance. Here's how it works: If storage or data cap is reached, all website will be instantly disabled and the user will be notified with email. Current option is to upgrade the plan or delete some files (only works if the storage cap reached).If paid user has exceeded the expiry date, it will return back to free plan automatically.Free user also has expiry date too, but it's 30 days after the last login. If the user has not logged in for 30 days, all website will be disabled and the user is notified before all website data is erased permanently within 2 weeks.If free user's website has used a noticeable data cap (it means getting enough traffic), that user doesn't need to login for another 30 days (the expiration date is extended automatically, as a thank you because it means free marketing for us too). "},{"title":"Upcoming new Features​","type":1,"pageTitle":"Producing a Cost-Effective Service","url":"/blog/producing-cost-effective-service#upcoming-new-features","content":"There maybe not a lot of new features upcoming, because I will focus on providing good documentation. Nonetheless, there maybe some minor new features or UI improvements in this month. Check back later! "},{"title":"Preparing for spike because of Heroku","type":0,"sectionRef":"#","url":"/blog/preparing-for-spike-of-heroku","content":"In few days ago Heroku announced it will no longer provide free plans, which is also means a free marketing for us. I tell people people about this service in dev.to and free-for.dev and the result is a recent spike of traffic. To get prepared for this spike, I need to adjust a few things: The New York server just been upgraded to 2 GB RAM and 2 vCPU immediately. This capacity is equal with what I use in Singapore server. Later if spike of usage still continue, I will use a separate mount drive for /home directory.I will continue to complete writing the documentation, but there will be few changes: We'll remove the optional tools we've had installed (Ruby, Go, etc.) and the only things that preinstalled will be php (all major/version supported), node and python with specific version provided from OS. This will make our documentation clear and removing the dangerous depedency with OS environment which can change at anytime. There's also a few improvements in features and security that I would like to talk for the next month: The home directory will change into some random unique string rather than what you provided from the UI. This is because anybody can do ls /home and get all username list from the server. This might need take time because it may break existing scripts. Another option is to use jailkit but I'm not so sure it will not break anything.we will provide a way to pipe the logs from server into portal UI. Right now the only way to open logs is from the Webmin UI.The documentation, again. So that's it, see you next month!","keywords":""},{"title":"Updating OS Across Servers","type":0,"sectionRef":"#","url":"/blog/updating-os-across-servers","content":"","keywords":""},{"title":"New Server in France​","type":1,"pageTitle":"Updating OS Across Servers","url":"/blog/updating-os-across-servers#new-server-in-france","content":"Available since January, this eliminates latency issues for European users who plan to use our services. It gains enough upvotes in the issue page and as of today there are dozens of websites hosted in this server. As of this writing, there are 3 servers in total, each one in Asia, Europe, and North America. There are no plan to add more servers in the near future, as probably additional budget will be allocated to increase computational power instead. Time will tell. "},{"title":"Force Recalculation of Disk Usage​","type":1,"pageTitle":"Updating OS Across Servers","url":"/blog/updating-os-across-servers#force-recalculation-of-disk-usage","content":"Since limit enforcement is based on disk usage is running since three months ago... some of our users wondering if there's a way to instantly recalculate the disk usage, as it's not updated automatically (takes schedule about 3 days to update). We have added a button to force recalculation of disk usage via a new button in bottom right of the Team page.   It is useful if you already run out of disk space and has deleted some files, so the website can be accessed again. To analyze which files are taking up the most disk space, you can use the ncdu command. It's available in all servers, and you can run it via SSH. "},{"title":"Country Input Field​","type":1,"pageTitle":"Updating OS Across Servers","url":"/blog/updating-os-across-servers#country-input-field","content":"As you can see from above screenshot, we have added a new field in the Team page to specify the country of your team. This is mostly used for analytics purpose, as we can see which country has the most users, and better features tailored for them. There's also input for currency (for payment purposes) and default server, which automatically selected based on selected country during the first login. "},{"title":"Pricing Adjustments​","type":1,"pageTitle":"Updating OS Across Servers","url":"/blog/updating-os-across-servers#pricing-adjustments","content":"We keep adjust pricing based on total usage and demand. As of today, the price tag is changed as follows: Lite plan: from 3 USD/month to 1.5 USD/monthKit plan: from 10 USD/month to 5 USD/monthPro plan: from 25 USD/month to 12.5 USD/month This price change is already reflected in other currencies as well. So the difference in value should be small. We hope a lot of users will be able to get on board faster with our services with this competitive price change. "},{"title":"Other Niche Features​","type":1,"pageTitle":"Updating OS Across Servers","url":"/blog/updating-os-across-servers#other-niche-features","content":"Although is still a work in progress, we have improved small things incrementally, such as the documentation and the website itself. There's also features requests that has been backlogged for a long time. We'll get there in time!  That's all for this update. We hope you enjoy our services, and we'll see you in the next update! "},{"title":"Welcome, New Landing Page!","type":0,"sectionRef":"#","url":"/blog/welcome-new-landing-page","content":"In a very narrow free time window I successfully redesign (again) the landing page, in fewer than 24 hours! The new design reflects more about what this service about: it's for the niche, but packed with lots of server tooling that (hopefully) makes your dev life easier. I captured the screenshot (in video) below. I like the dark mode button! Sorry! Your browser does not support the video tag. If you wonder, this new landing site is built using Docusaurus, replacing our old simple website that's powered by Jekyll. I saved the old site in archive.org if you wanted to see the difference. Anyway, I feel sorry that the proper blog and docs are just live today. Actually, a lot has gotten since 2 years I've been making this platform. Let's hope it get better every time! ","keywords":""},{"title":"Deploy Apps with DOM Cloud","type":0,"sectionRef":"#","url":"/docs/deployment/","content":"Deploy Apps with DOM Cloud Deploy Static SitesDeploy PHP AppsDeploy Node.js AppsDeploy Python AppsDeploy Ruby AppsDeploy Popular CMS Apps","keywords":""},{"title":"Deno","type":0,"sectionRef":"#","url":"/docs/deployment/deno","content":"Deno","keywords":""},{"title":"Go","type":0,"sectionRef":"#","url":"/docs/deployment/go","content":"Go","keywords":""},{"title":"Deploy Node.js Apps","type":0,"sectionRef":"#","url":"/docs/deployment/node","content":"","keywords":""},{"title":"Recipes​","type":1,"pageTitle":"Deploy Node.js Apps","url":"/docs/deployment/node#recipes","content":"ExpressNext.jsNuxt.jsSvelteKit Init in Development Mode​ source: clear features: - node lts nginx: root: public_html/public passenger: enabled: on app_env: development app_start_command: env PORT=$PORT npx nodemon ./bin/www commands: - npx express-generator --view=pug --css=less --git . - npm i - npm add -D nodemon A simple express website with nodemon for development. Switch to Production Mode​ nginx: root: public_html/public passenger: enabled: on app_start_command: env PORT=$PORT npm start This switches Express to production mode.  Let's extract those recipes meaning individually. "},{"title":"Node environment​","type":1,"pageTitle":"Deploy Node.js Apps","url":"/docs/deployment/node#node-environment","content":"The default Node version is 16.x, which is the default provided from the OS. To change Node version used to the latest (LTS) one, put this in runner: features: - node lts  It will install node in userland and all binaries will use it instead of the default one. You can also install other or specific version of Node.js e.g. node latest, node beta, node 16.3.2. This action will install Node.js in userland with the help of webi script and enabling Corepack so package managers (npm &amp; yarn &amp; pnpm) can be used alongside userland node. "},{"title":"NGINX Setup​","type":1,"pageTitle":"Deploy Node.js Apps","url":"/docs/deployment/node#nginx-setup","content":"Binding Node.js through NGINX is done by Passenger. To make the binding work, you need to make sure that your app can open port number using given environment variable (.e.g. PORT), and you point the root of your public file to a public directory. root: public_html/public nginx: passenger: enabled: on app_start_command: env PORT=$PORT npm start  If your setup is complex (e.g. using multiple websites in a domain) you can tell which exactly the app_root directory your app is serving from. Just make sure your root directory is outside of your app directory. root: public_html/client/dist nginx: locations: - match: /api passenger: enabled: on app_start_command: env PORT=$PORT npm start app_root: public_html/server  Some frameworks like Next.js likes to serve a hidden static directory e.g. /_next. We can reduce server load by creating an extra /_next location so those files is directly handled (and properly cached) by NGINX. nginx: locations: # optimizing static cache - match: /_next/ alias: public_html/.next/  info There's so much more to cover about NGINX configuration! read more at NGINX page. "},{"title":"Package Install​","type":1,"pageTitle":"Deploy Node.js Apps","url":"/docs/deployment/node#package-install","content":"Package installs can be done just like usual npm/yarn/pnpm install command. For a little advice, using these extra options is recommended in production: npm ci yarn install --immutable  "},{"title":"Clear packager cache​","type":1,"pageTitle":"Deploy Node.js Apps","url":"/docs/deployment/node#clear-packager-cache","content":"In meantime if your development has stable enough, you may want to clear the packager cache to save space. npm cache clean --force yarn cache clean --force pnpm cache clean --force  "},{"title":"Node.js Error Logs​","type":1,"pageTitle":"Deploy Node.js Apps","url":"/docs/deployment/node#nodejs-error-logs","content":"When your Node.js crashed during startup, a helpful error will be displayed in the browser. This aids you to diagnose if some configuration is wrong. (TODO) Unfortunately, we haven't found a way to capture Node.js error logs yet. You can (should?) do error logging to files using builtin Node.js Console API or use Winston. "},{"title":"Deploy Popular CMS Apps","type":0,"sectionRef":"#","url":"/docs/deployment/cms","content":"","keywords":""},{"title":"WordPress​","type":1,"pageTitle":"Deploy Popular CMS Apps","url":"/docs/deployment/cms#wordpress","content":"Recipe source: https://wordpress.org/latest.zip directory: wordpress features: - mysql nginx: fastcgi: on locations: - match: / try_files: $uri $uri/ /index.php$is_args$args - match: ~ /xmlrpc\\.php$ deny: all commands: - cp wp-config-sample.php wp-config.php - sed -i &quot;s/database_name_here/${DATABASE}/g&quot; wp-config.php - sed -i &quot;s/username_here/${USERNAME}/g&quot; wp-config.php - sed -i &quot;s/password_here/${PASSWORD}/g&quot; wp-config.php - sed -i &quot;s/utf8/utf8mb4/g&quot; wp-config.php  This downloads and extracts WordPress and setup the database. Also blocks /xmlrpc.php because it's a common DoS attack. "},{"title":"Strapi​","type":1,"pageTitle":"Deploy Popular CMS Apps","url":"/docs/deployment/cms#strapi","content":"RecipeProduction Config source: clear features: - ssl - node lts nginx: root: public_html/public passenger: enabled: 'on' app_env: development app_start_command: env PORT=$PORT yarn develop locations: - match: /admin/ alias: public_html/build/ commands: - yarn create strapi-app . --quickstart --no-run - echo JWT_SECRET=`node -e &quot;console.log(crypto.randomBytes(16).toString('base64'))&quot;` &gt; .env - echo APP_KEYS=`node -e &quot;console.log(crypto.randomBytes(16).toString('base64'))&quot;` &gt;&gt; .env - echo ADMIN_JWT_SECRET=`node -e &quot;console.log(crypto.randomBytes(16).toString('base64'))&quot;` &gt;&gt; .env - echo API_TOKEN_SALT=`node -e &quot;console.log(crypto.randomBytes(16).toString('base64'))&quot;` &gt;&gt; .env - echo STRAPI_ADMIN_BACKEND_URL=//${DOMAIN} &gt;&gt; .env - STRAPI_ADMIN_BACKEND_URL=//${DOMAIN} yarn build  "},{"title":"Ghost​","type":1,"pageTitle":"Deploy Popular CMS Apps","url":"/docs/deployment/cms#ghost","content":"Recipe source: https://github.com/TryGhost/Ghost/releases/download/v4.4.0/Ghost-4.4.0.zip root: public_html/public nginx: ssl: enforce fastcgi: off passenger: enabled: on features: - mysql - ssl commands: - echo export PATH=&quot;$HOME/public_html/node_modules/.bin:$PATH&quot; &gt; ~/.bash_profile - source ~/.bash_profile - mkdir public - echo &quot;require('./index.js');&quot; &gt; app.js - wget -q -O config.production.json https://gist.githubusercontent.com/willnode/45e722be156736ea3a08f29d37ad997c/raw/93dbbecc209ac9e6b9eb0a9d22ece1f14ab54e67/ghost-production-config.json - 'sed -ri &quot;s/username_here/${USERNAME}/g&quot; config.production.json' - 'sed -ri &quot;s/password_here/${PASSWORD}/g&quot; config.production.json' - 'sed -ri &quot;s/database_here/${DATABASE}/g&quot; config.production.json' - 'sed -ri &quot;s/url_here/https:\\/\\/${DOMAIN}/g&quot; config.production.json' - yarn install --production --no-progress - knex-migrator init  "},{"title":"Deploy Python Apps","type":0,"sectionRef":"#","url":"/docs/deployment/python","content":"","keywords":""},{"title":"Recipes​","type":1,"pageTitle":"Deploy Python Apps","url":"/docs/deployment/python#recipes","content":"FlaskDjango Init​ source: clear features: - python latest nginx: root: public_html/app/static passenger: enabled: on app_env: development app_root: public_html python: .pyenv/shims/python commands: - pip install createflaskapp - create-flask-app project - mv project/* . ; rm -rf project - cat requirements.txt | grep -v &quot;pkg-resources&quot; &gt; requirements.txt || true - pip install -r requirements.txt - echo &quot;from app import app as application&quot; &gt; passenger_wsgi.py A simple Flask website with create-flask-app for development.  Let's extract those recipes meaning individually. "},{"title":"Python environment​","type":1,"pageTitle":"Deploy Python Apps","url":"/docs/deployment/python#python-environment","content":"The default Python version is 3.9, which is the default provided from the OS. To change Python version used to the latest one, put this in runner: features: - python latest  It will install python in userland and all binaries will use it instead of the default one. You can also install other or specific version of Python e.g. python 3.9, python 3.9.2. This action will install Python in userland with the help of webi script. "},{"title":"NGINX Setup​","type":1,"pageTitle":"Deploy Python Apps","url":"/docs/deployment/python#nginx-setup","content":"Binding Python through NGINX is done by Passenger. To make the binding work, you need to make sure that your app can open port number using given environment variable (.e.g. PORT), and you point the root of your public file to a public directory. root: public_html/public nginx: passenger: enabled: on app_start_command: env PORT=$PORT python main.py  If your setup is complex (e.g. using multiple websites in a domain) you can tell which exactly the app_root directory your app is serving from. Just make sure your root directory is outside of your app directory. root: public_html/client/dist nginx: locations: - match: /api passenger: enabled: on app_start_command: env PORT=$PORT python main.py app_root: public_html/server  info There's so much more to cover about NGINX configuration! read more at NGINX page. "},{"title":"Package Install​","type":1,"pageTitle":"Deploy Python Apps","url":"/docs/deployment/python#package-install","content":"Package installs can be done just like usual pip install command. Because it's run in userland, you can install packages without issuing sudo or --user. "},{"title":"Clear packager cache​","type":1,"pageTitle":"Deploy Python Apps","url":"/docs/deployment/python#clear-packager-cache","content":"In meantime if your development has stable enough, you may want to clear the packager cache to save space. pip cache purge  "},{"title":"Python Error Logs​","type":1,"pageTitle":"Deploy Python Apps","url":"/docs/deployment/python#python-error-logs","content":"When your Python crashed during startup, a helpful error will be displayed in the browser. This aids you to diagnose if some configuration is wrong. (TODO) Unfortunately, we haven't found a way to capture Python error logs yet. You can utilize file-based log using logging module to capture errors. "},{"title":"Deploy Ruby Apps","type":0,"sectionRef":"#","url":"/docs/deployment/ruby","content":"Deploy Ruby Apps TODO","keywords":""},{"title":"Rust","type":0,"sectionRef":"#","url":"/docs/deployment/rust","content":"Rust","keywords":""},{"title":"Deploy PHP Apps","type":0,"sectionRef":"#","url":"/docs/deployment/php","content":"","keywords":""},{"title":"Recipes​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#recipes","content":"General PHPCodeIgniterLaravel Development Mode​ source: clear nginx: fastcgi: on commands: - echo &quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot; &gt; index.php - echo &quot;&lt;?php phpinfo(15);&quot; &gt; phpinfo.php - echo &quot;display_errors = On&quot; &gt; .user.ini - echo &quot;display_startup_errors = On&quot; &gt;&gt; .user.ini This creates a simple PHP that outputs &quot;Hello, World!&quot; and load some useful development features.  Let's extract those recipes meaning individually. "},{"title":"NGINX Setup​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#nginx-setup","content":"NGINX can be configured to serve PHP files. PHP files are served by the PHP-FPM server. This works by writing fastcgi_pass directive in the NGINX configuration, which points to underlying PHP-FPM server proxy for given host. The minimum configuration to enable PHP is: nginx: fastcgi: on  "},{"title":"fastcgi Options​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#fastcgi-options","content":"The fastcgi option has three options: on, off, always. The difference between three options: fastcgi Options off​ location ~ \\.php$ { return 404; fastcgi_pass ....; }  This essentially disables PHP support in NGINX because it directly return 404 without being forwarded to fastcgi. This is the default value for fastcgi. fastcgi Options on​ location ~ \\.php$ { try_files $uri =404; fastcgi_pass ......; }  This detects all URLs that ends with .php and forwards it to the PHP-FPM server. However, if the file is not found, it will return 404 without being forwarded to fastcgi. fastcgi Options always​ location ~ \\.php(/|$) { fastcgi_pass ......; }  This detects all URLs that ends with .php or contains .php in the path and forwards it to the PHP-FPM server. The path after .php is sent as additional path in $_SERVER['PATH_INFO']. "},{"title":"Multiple Directory Setup​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#multiple-directory-setup","content":"If you have multiple directory setup, it's important to write fastcgi: onwhere the directory should also serve PHP files, for example: nginx: fastcgi: on locations: - match: /admin/ root: public_app/public fastcgi: on  The second fastcgi: on will make sure PHP files inside /admin/ directory are also served by PHP-FPM. "},{"title":"Rewrite root directory​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#rewrite-root-directory","content":"nginx: root: public_html/public  The default root directory is public_html, where app files are extracted from recipes. Some modern frameworks like Laravel and CodeIgniter put static files inside public folder to avoid leaking bare *.php files be accessed maliciously and creates RCE attack. So when your app requires this behavior, you need to change the root folder to public_html/public. info Not to be confused with root: inside nginx:, this setting is placed outside of nginx:because it will also tell Virtualmin to use this folder as e.g. SSL verification requests. "},{"title":"Reroute index.php​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#reroute-indexphp","content":"nginx: locations: - match: / try_files: $uri $uri/ /index.php$is_args$args fastcgi: on  If you use frameworks, they also likes to handle custom routes. The try_files: configuration here is to instruct NGINX to try to serve the root /index.php file in case no static files found in the given request URL. "},{"title":"Multiple website in a domain​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#multiple-website-in-a-domain","content":"root: public_html nginx: locations: - match: ~ ^/(app|auth|api|web)/ root: public_app/public fastcgi: on try_files: $uri $uri/ /index.php$is_args$args - match: /uploads/ alias: public_app/storage/app/public/ - match: / try_files: $uri $uri/ /index.php$is_args$args fastcgi: on  The example setup above is a typical setup for combining a WordPress (the landing page) in ~/public_htmland a Laravel app in ~/public_app. Let's see what happens when we do requests from browser: /: Resolves to /public_html/index.php and loads the landing page at /./about: Resolves to /public_html/index.php and loads the landing page at /about./api/oauth: Resolves to /public_app/index.php and loads the Laravel app at /api/oauth./web/login: Resolves to /public_app/index.php and loads the Laravel app at /web/login./uploads/image.png: Resolves to /public_app/storage/app/public/image.png and loads the image (if exist). Let's see another approach to combine multiple websites in a domain. root: public_html nginx: locations: - match: /app/ alias: public_app/public fastcgi: on try_files: $uri $uri/ @app - match: &quot;@app&quot; /app/(.*)$ /app/index.php last - match: /uploads/ alias: public_app/storage/app/public/ - match: / try_files: $uri $uri/ /index.php$is_args$args fastcgi: on  The example above puts the whole laravel app inside /app/ subfolder. Let's see how it works: /: Resolves to /public_html/index.php and loads the landing page at /./about: Resolves to /public_html/index.php and loads the landing page at /about./app/api/oauth: Resolves to /public_app/index.php and loads the Laravel app at /api/oauth./app/web/login: Resolves to /public_app/index.php and loads the Laravel app at /web/login./web/login: Resolves to /public_html/index.php and loads the landing page at /web/login (404 error)./uploads/image.png: Resolves to /public_app/storage/app/public/image.png and loads the image (if exist). You can read more about putting Laravel in subfolder using NGINX in this StackOverflow answer. "},{"title":"PHP environment setup​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#php-environment-setup","content":"The default PHP version is 7.4, which is the default provided from the OS. To change PHP version used in PHP-FPM to the latest one, put this in runner: features: - php latest  You can also use a fixed PHP version: php 7.4, php 8.0, php 8.1. Unfortunately you can't use custom PHP version other than provided because it's tied to system daemon. We always update the list to the latest supported version or latest major version starting from PHP 7.4. Support for PHP extensions is varies but you can request a ticket to be included, provided the extension is provided officially by PHP. When PHP version is changed, it's also changing the php and composer version it used. Alternatively, you can call the alternative php version using php81, php80, php56, etc. You can also do this for composer, e.g. php81 `which composer` install. "},{"title":"Composer install​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#composer-install","content":"Composer is installed automatically. The good recommendation to install packages is with: composer install --no-dev --no-progress --optimize-autoloader  --no-dev to skip development packages (things like PHPUnit), to save space.--no-progress to skip the progress bar, because it's problematic when used inside runner.--optimize-autoloader to speed up the package resolution in production. "},{"title":"Clearing composer cache​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#clearing-composer-cache","content":"If your development is stable enough, you can clear the cache to save space by calling: composer clear-cache  The composer cache locates in ~/.composer/cache/. "},{"title":"PHP INI configuration​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#php-ini-configuration","content":"The PHP INI configuration is useful to tweak the PHP behavior such at upload size limits. While you can't directly change the PHP INI located in system files, you can create .user.iniinto PHP root folder (typically ~/public_html/.user.ini) and tweak the config there. An example of PHP INI configuration is: ~/public_html/.user.ini upload_max_filesize = 32M post_max_size = 32M  See the list of available PHP INI configuration in official PHP documentation. To see default values or if your change has been in effect, use phpinfo(). caution PHP INI doesn't work? You may need to wait until the PHP process is restarted, which typically about 5 minutes without traffic or after about 500 requests. Note that you can't change configs with PHP_INI_SYSTEM level because it's only changeable in the main system INI files. "},{"title":"PHP Error Logging​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#php-error-logging","content":"The error logs can be seen in NGINX Error Logs in Virtualmin web UI. You won't see error details in your website because we use production default settings. If you want to see the error details in website (not recommended!), change this setting in .user.ini: ~/public_html/.user.ini display_errors = On display_startup_errors = On  "},{"title":"Restarting PHP​","type":1,"pageTitle":"Deploy PHP Apps","url":"/docs/deployment/php#restarting-php","content":"PHP doesn't need restart. Changing PHP files instantly changes the running server code. The PHP-FPM instance itself is running as ondemand and goes inactive after 5 minutes of no traffic. "},{"title":"Features","type":0,"sectionRef":"#","url":"/docs/features/","content":"Features DOM Cloud features are explained by this system architecture diagram below:","keywords":""},{"title":"Deploy Static Sites","type":0,"sectionRef":"#","url":"/docs/deployment/static-site","content":"","keywords":""},{"title":"Recipes​","type":1,"pageTitle":"Deploy Static Sites","url":"/docs/deployment/static-site#recipes","content":"ExpressViteNext.jsStrapi source: clear features: ['node lts'] root: public_html/public nginx: passenger: enabled: on app_start_command: env PORT=$PORT npm start commands: - npx express-generator . - npm i A simple express website that outputs &quot;Hello Express!&quot; Let's extract those recipes meaning individually. "},{"title":"Databases","type":0,"sectionRef":"#","url":"/docs/features/database","content":"","keywords":""},{"title":"Using the Database​","type":1,"pageTitle":"Databases","url":"/docs/features/database#using-the-database","content":"After enabling MySQL/Postgres from the runner. You can provide the database credentials like below: Hostname: localhost (because the database always live in the same server)Username: Same username with server (see from manage tab)Password: Same password with server (see from manage tab)Database name: Usually username + _db unless you've create another DB "},{"title":"Remote Access​","type":1,"pageTitle":"Databases","url":"/docs/features/database#remote-access","content":"Remote Access is used to manage databases using your local software -- such as DBeaver, HeidiSQL or TablePlus. PostgreSQL permits remote access by default. MySQL is more grained and doesn't allow remote access by default. You need to change it by go to the Webmin -&gt; Databases -&gt; Remote access then add %.%.%.% and %:%:% (next line above localhost) to allowed hosts list. "},{"title":"Timestamp​","type":1,"pageTitle":"Databases","url":"/docs/features/database#timestamp","content":"The whole server always sets the clock in UTC. A good idea to handle timezone is done by client processing (Javascript), both after getting the data from database/AJAX and before sending data/Posts to server. If you don't care about timezone and you think it's safe to assume that your website is only accessed in one timezone, you can set the timezone in the backend using date_default_timezone_set for PHP or TZ env for non-PHP (set it to passenger's env_var_list). "},{"title":"DNS Daemon","type":0,"sectionRef":"#","url":"/docs/features/dns","content":"DNS Daemon DNS is a service that translates domain names to IP addresses. Usually, it's enabled automatically for a given website if used with a custom domain. If you host a website with a custom domain, you can point the name server to these below to use our DNS service: nsp.domcloud.io nss.domcloud.io To add custom records to your domain, you can use the DNS Manager via Webmin -&gt; DNS Records. You can also add or delete DNS records using the runner.","keywords":""},{"title":"Firewall Daemon","type":0,"sectionRef":"#","url":"/docs/features/firewall","content":"","keywords":""},{"title":"Inbound Connection​","type":1,"pageTitle":"Firewall Daemon","url":"/docs/features/firewall#inbound-connection","content":"Inbound connection is for incoming traffic from the internet. Certain ports are opened for variety of purposes: 21 - FTP22 - SSH53 - DNS (TCP &amp; UDP)80 - HTTP443 - HTTPS2443 - Webmin3306 - MySQL5432 - PostgreSQL32768:65535 - Ephemeral Ports (TCP only) Ephemeral ports are only allowed to be used for local development inside the server. Other ports are blocked. "},{"title":"Outbound Connection​","type":1,"pageTitle":"Firewall Daemon","url":"/docs/features/firewall#outbound-connection","content":"Outbound connection is for outgoing traffic to the internet. It's allowed for all ports and protocols by default, except port 25. Port 25 is blocked for outbound connection to prevent SMTP / Email abuse. If you need to send email, you can use a third-party services. There are also additional measures to prevent abuse, by enabling firewall feature via Runner. It blocks all outbound connection except for sites that are whitelisted. It works by resolving all whitelisted sites to IP addresses and allow only those IP addresses to be accessed. This firewall feature is opt-in and can be turned off at will. The feature is mostly used for installation for weakly secured PHP servers like WordPress. To check if the feature is enabled, you can go to Check -&gt; Firewall menu. "},{"title":"NGINX and App Daemon","type":0,"sectionRef":"#","url":"/docs/features/nginx","content":"","keywords":""},{"title":"Check current configuration​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#check-current-configuration","content":"You can check the current configuration by going to Check -&gt; NGINX.   The left side is the configurable options, and the right side is the current configuration applied in NGINX. The configurable option is written in YAML format, which when saved, applied as a new configuration configured via the runner. Below is the example of the configuration: nginx: fastcgi: 'on' root: public_html index: index.html index.php ssl: 'on'  "},{"title":"Configure NGINX for HTTPS​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#configure-nginx-for-https","content":"The ssl option has three options: always, on, off. The always option will force the server to redirect all HTTP traffic to HTTPS. The default value for ssl is on. "},{"title":"Configure NGINX for PHP​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#configure-nginx-for-php","content":"The fastcgi option has three options: always, on, off. The default value for fastcgi is off. This section is covered more in the PHP Deployment section. "},{"title":"Configure NGINX for General Apps​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#configure-nginx-for-general-apps","content":"NGINX by default only forwards connection and can't invoke the desired app to run. We use Phusion Passenger so we can configure NGINX to invoke the app and forwards HTTP requests. The minimum configuration to enable NGINX for general apps is: nginx: root: public_html/public passenger: enabled: on app_start_command: env PORT=$PORT npm start  Which is equivalent to running npm start in the public_html (parent of root) directory, with the PORT environment variable set to the port that NGINX is listening to. Passenger's enabled: on config is required to indicate that Passenger's module is activated for given host. It is important that root is set to the directory that contains the public directory. This is because NGINX will serve the public directory as the root directory for serving static files, and you don't want to expose the entire app directory to the public. If the app must be called from a subdirectory, you can use the app_root option to specify the directory that contains the app. For example, if the main app file is in public_html/server/app.js, you can set the app_root to public_html/server: nginx: root: public_html/public passenger: enabled: on app_root: public_html/server app_start_command: env PORT=$PORT node app.js  "},{"title":"PORT environment variable​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#port-environment-variable","content":"The $PORT environment variable is set by NGINX. It is a random port that's chosen to be proxied from NGINX. The app must listen to this port to receive HTTP requests. You can tell the app to listen to this port by setting the an environment variable via env like this: app_start_command: env PORT=$PORT node app.js  Or you can set the port using the app's argument if available: app_start_command: node app.js --port $PORT  "},{"title":"Set Environment Variables​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#set-environment-variables","content":"Passenger has three ways to set environment variables: "},{"title":"app_env option​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#app_env-option","content":"The app_env option is special option that's used to set environment mode. The default value is production. This option sets the value to the following environment variables: RAILS_ENVRACK_ENVWSGI_ENVNODE_ENVPASSENGER_APP_ENV You can set this value other values such as development or test. "},{"title":"env_var_list option​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#env_var_list-option","content":"The env_var_list option is used to set environment variables directly from NGINX. It's a list of environment variables to set. The value is a string that's in the format of KEY=VALUE. For example: nginx: passenger: enabled: on app_start_command: env PORT=$PORT node app.js env_var_list: - APP_SECRET=SECRET_VALUE - APP_CONFIG={&quot;key&quot;:&quot;value&quot;}  "},{"title":"~/.bashrc file​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#bashrc-file","content":"Passenger reads the ~/.bashrc file to set environment variables. You can set environment variables in this way. For example run this command to edit the ~/.bashrc file via SSH: nano ~/.bashrc  Then add the following line to the file: export APP_SECRET=SECRET_VALUE  The environment variable will be set when the app is started next time. More information about setting environment variables can be found in the Passenger documentation. "},{"title":"Restarting App​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#restarting-app","content":"Any edits either in the app file or ~/.bashrc file will not be applied until the app is restarted. You can restart the app forcibly by running this in SSH: passenger-config restart-app /  More information about restarting app can be found in the Passenger documentation. "},{"title":"Websocket​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#websocket","content":"If the app uses Websocket, you have to enable sticky sessions in NGINX. This is because there will be multiple process spawned and Phusion Passenger will load balance the requests to the processes. If the requests are not sticky, the Websocket connection will be lost. sticky_sessions: on  You can read more about websocket usage at the Passenger documentation "},{"title":"Language-Specific Configuration​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#language-specific-configuration","content":"More information about configuring NGINX for specific languages can be found in the Deployment section. "},{"title":"Global Configuration​","type":1,"pageTitle":"NGINX and App Daemon","url":"/docs/features/nginx#global-configuration","content":"Global configuration of NGINX cannot be changed. However, some of the configuration are set as optimally as possible. You can see more about the global configuration in this file. Some of the interesting configuration are: Static files are cached with max expiration time.Gzip are enabled for css, js, svg static files.Maximum file upload size is set to 512MB.There's rate limit of 4 requests per second with 100 burst request per IP address to mitigate DoS attack. "},{"title":"The Runner","type":0,"sectionRef":"#","url":"/docs/features/runner","content":"","keywords":""},{"title":"source​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#source","content":"Type: string or object. If it a string, it will be the url. If this value is set, it will download contents inside the host. The content can be either a ZIP file or a Git repository (to perform clone), or clear to simply clears the content. CAUTION: This option will always overwrite all contents inside the host. Use with caution. "},{"title":"url​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#url","content":"The zip (or clone) URL to download. Required. "},{"title":"type​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#type","content":"To extract a ZIP file or clone a repo. If omitted, it autodetects whether it is a github.com or gitlab.com URL and perform clone instead of extract. "},{"title":"directory (type: extract only)​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#directory-type-extract-only","content":"Specify the folder name to move out of ZIP file after extraction. This also can be specified from url's hash. If omitted, no move operation performed. For legacy reason, a directory in root config will works too, it will be converted as source.directory. "},{"title":"branch (type: clone only)​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#branch-type-clone-only","content":"Specify the clone branch to get checked out. This also can be specified from directory or url's hash. If omitted, the default branch is checked out. "},{"title":"shallow (type: clone only)​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#shallow-type-clone-only","content":"Do shallow clone? Default to true. It is recommended to leave it that way to keep .git internal size low. "},{"title":"submodules (type: clone only)​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#submodules-type-clone-only","content":"Do Recursive clone of submodules? Default to false.  "},{"title":"features​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#features","content":"Type: Array of string or object. If one item is a string, it will be converted to object (.e.g. mysql on become { mysql: on }). This configures all features available for the host in DOM Cloud. "},{"title":"mysql​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#mysql","content":"Configure MariaDB (MySQL) Database Server. mysql or mysql on Enable MariaDB and create default DB.mysql create &lt;dbname&gt; Create a new database with &lt;dbname&gt;.mysql drop &lt;dbname&gt; Drop a database with &lt;dbname&gt;.mysql off. Disables mysql feature. Caution: Also drop all DB permanently. "},{"title":"postgresql​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#postgresql","content":"Configure PostgreSQL Database Server. postgresql or postgresql on Enable PostgreSQL and create default DB.postgresql create &lt;dbname&gt; Create a new database with &lt;dbname&gt;.postgresql drop &lt;dbname&gt; Drop a database with &lt;dbname&gt;.postgresql off. Disables postgresql feature. Caution: Also drop all DB permanently. "},{"title":"dns​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#dns","content":"Configure BIND DNS Server. dns or dns on Enable DNS server.dns add &lt;type&gt; &lt;value&gt; Add a record.dns rem &lt;type&gt; &lt;value&gt; Deletes a record.dns off. Disables dns feature. Caution: Also clears all DNS records. You can add multiple records with lists. For example: features: - dns: - add a sub-a 1.2.3.4 - add aaaa sub-a 1.2.3.4 - add cname sub-b example.net. - add cname sub-c example.net.  DNS records for child server is handled automatically. info When applying CNAME, looks out for the trailing dot (.) at the end of CNAME values. It is required to specify the root domain, otherwise it will be appended with the parent domain. "},{"title":"firewall​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#firewall","content":"Configure Whitelist Firewall. firewall on or firewall Enable firewall.firewall off Disable firewall. Firewall is an additional protection to make sure the host won't send any outgoing request not defined in the whitelist. It's intended for use of hosts with low security measures. It's recommended for any host who doesn't use any third-party API. caution Please note due to obvious PHP weakness in security, it's mandatory to turn on this feature for WordPress or any weakly protected PHP server. "},{"title":"ssl​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#ssl","content":"Attempt to renew SSL certificate with Let's Encrypt. "},{"title":"root​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#root","content":"Set directory root path. This also changes the root directive in NGINX config. info Because of legacy reason, this is also available in root config. "},{"title":"php​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#php","content":"Set PHP (FastCGI) version. Available options: php 7.4 (default)php 8.0php 8.1php 8.2php latest Remember that php 8.x is an active release. This also sets the php (and composer) to the right version in CLI/SSH. PHP files that served through NginX are served with php-fpm (FastCGI Process Manager). "},{"title":"node​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#node","content":"Install specific NodeJS version. Available options: node or node ltsnode latestnode betanode x.y.znode off By default it's Node 16.x provided from system. This also sets the node (and npm, yarn, etc.) to the right version in CLI/SSH. This installation is powered by webi. "},{"title":"python​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#python","content":"Install specific Python version. Available options: python or python latestpython x.ypython x.y.zpython off By default it's Python 3.9 provided from system. This also sets the python (and pip) to the right version in CLI/SSH. This installation is powered by pyenv. "},{"title":"ruby​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#ruby","content":"Install specific Ruby version. Available options: ruby or ruby latestruby x.y.zruby off By default it's Ruby 3.0 provided from system. This installation is powered by rvm. "},{"title":"deno​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#deno","content":"Install specific Deno version. Available options: deno or deno latestdeno betadeno x.y.zdeno off There's no default Deno version provided from system. This installation is powered by webi. "},{"title":"go​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#go","content":"Install specific Go version. Available options: go or go latestgo x.y.z go off There's no default Go version provided from system. This installation is powered by webi. "},{"title":"rust​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#rust","content":"Install specific Rust version. Available options: rust or rust latestrust x.y.zrust off There's no default Rust version provided from system. This installation is powered by rustup.  "},{"title":"nginx​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#nginx","content":"Type: object. This is the NGINX configuration for a given host. All configurations below are not preserved at each config update. It's recommended to use the NGINX tab in the dashboard to reconfigure NGINX. "},{"title":"ssl​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#ssl-1","content":"HTTPS options: on (default), always (always redirect HTTP to HTTPS), off (not recommended). "},{"title":"fastcgi​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#fastcgi","content":"Whether to enable or not enable PHP file execution: on or off. If omitted, off is the default. You can override PHP settings via the .user.ini file in the document root. Once changed it will not change immediately due to cache, but usually takes no more than 5 minutes. "},{"title":"error_pages​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#error_pages","content":"List of error pages command. It's particularly useful for static websites. Read on the NGINX docs. 404 /404.html: Show 404 error page as 404.html.404 =200 /200.html: Assume 404 error as 200 OK and show 200.html (SPA).500 502 503 504 /50x.html: Show 50x error as 50x.html.  "},{"title":"passenger​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#passenger","content":"If you want to run Non-PHP apps, you need to setup with Passenger Phusion. Passenger is an additional layer on top of NGINX to run any non-PHP apps. To enable non-PHP apps, at minimum you need these configuration: root: public_html/public nginx: passenger: enabled: on app_start_command: node server.js --port=$PORT  The configuration above will execute node server.js --port=$PORT in the parent of root folder (in this case, ~/public_html). Note that you always need to pass the $PORT and use that as the port where your app is listening to. If your app accept port from environment instead you can use env like env PORT=$PORT node server.js. For custom environment values you can leverage app_env and env_var_list. To restart a non-PHP apps you can execute passenger-config restart-app / in CLI/SSH. You can also make it always restart if you have to. Available options: enabled: on or off (default)app_env: environment setup. Either production (default) or development.env_var_list: array of environment values in the format of KEY=VALUE.app_start_command: Passenger GLS command to start the app with $PORT as the port where your app is listening to.friendly_error_pages: on (default) or offbase_uri: base URL for the app (default is /).sticky_sessions: on or off (default). Enable this for websocket support.document_root: path to public document root (default is root). This value is relative to the user $HOME folder.app_root: path to app root (default is parent of root). This value is relative to the user $HOME folder. For non-GLS these options are available too: app_type: Type of Appstartup_file: Startup filenameruby: Ruby pathnodejs: Nodejs pathpython: Python path meteor_app_settings: Meteor path info GLS (Generic Language Support) is a cool concept where you can run any language or binaries within NGINX with the help of Passenger. It's recommended to use GLS instead of the non-GLS options. "},{"title":"locations​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#locations","content":"Array objects which one or more of: match: Matching URL location (required)root: Root path (relative to $HOME)alias: Alias path (relative to $HOME)rewrite: Rewrite URL directivetry_files: Try files URL directivereturn: Return code directivefastcgi: (same as above)passenger: (same as above) Please read NGINX Location directive for more information. info proxy_pass, although it's popular, we're not supporting it because it's not a good practice to use it in a shared servers. You must use passenger instead.  "},{"title":"commands​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#commands","content":"Type: array of string. List of SSH commands in sequence. The starting directory is always ~/public_html. If any exit code detected to be not zero, the execution chain stop. This is where all the things you usually put after the execution of source. Things like installing depedencies, bundling frontend or injecting database credential. The list of commands is always executed after the source and features and before nginx and root list. Builtin envar for commands​ Aside with the usual SSH commands, it does have an additional envar to help with scripting: $USERNAME: The username.$DATABASE: The database name (usually ${USERNAME}_db but can be changed if new database name is supplied before).$PASSWORD: The user login password.$DOMAIN: The domain name. These envars also will be set: CI=trueCONTINUOUS_INTEGRATION=trueDEBIAN_FRONTEND=noninteractiveLANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 Builtin Git Credentials​ If you have logged in with GitHub with repo access, an envar $GITHUB_TOKEN will be available for you to use. Together with Git Credentials API, it will grant the access to your private repos along with all git commands run from the Runner. This is useful for cloning or pulling private repos after a webhook is received, for example. caution This does have security implication and we have taken some security measures to prevent leaks. For example, since it's provided within envar, you git commands will break if run within SSH. That's because its doesn't saved anywhere in the server. We doesn't prevent you, for example to run echo $GITHUB_TOKEN in the commands list and use it as the token used for SSH session. But we do recommend you to not do that. Time limit​ The time limit for overall script in single run is 10 minutes. If it's exceeded, the execution chain will automatically stop.  "},{"title":"subdomains and subdomain​","type":1,"pageTitle":"The Runner","url":"/docs/features/runner#subdomains-and-subdomain","content":"subdomains is used to run specific commands for a given subdomain name. It's an array of objects with subdomain, some of the features and commands keys. "},{"title":"Services","type":0,"sectionRef":"#","url":"/docs/features/service","content":"","keywords":""},{"title":"Linux tools​","type":1,"pageTitle":"Services","url":"/docs/features/service#linux-tools","content":"These popular system-wide linux tools are available out of the box:  cmake\tconvert\tcomposer\tcurl\tgcc git\tgpg2\tgzip\tmake\tmysql nano\topenssl\tncdu\tnode\tperl phar\tphp\tpsql\tpython\truby sed\tssh\tsqlite3\ttar\tunzip vi\tvim\twget\tyarn\tzip info Don't rely on their version as it's OS wide and can be changed anytime though system updates. "},{"title":"VSCode SSH Remote​","type":1,"pageTitle":"Services","url":"/docs/features/service#vscode-ssh-remote","content":"You can use VSCode to edit your files and code remotely. It's a great tool quickly edit files just like you're editing locally. To use it, you need to install the Remote - SSH extension. Then, you can launch a session from the Manage tab. tip To avoid clutter, you can open the VSCode SSH Remote session inside a subdirectory. Open using the dropdown right next to the Visual Studio Code button in manage tab. "},{"title":"HMR (Hot Module Replacement)​","type":1,"pageTitle":"Services","url":"/docs/features/service#hmr-hot-module-replacement","content":"HMR is a feature that allows you to edit your code and see the changes immediately without reloading the website. While DOM Cloud primary usage is for hosting production websites, it doesn't stop you from using it for development. Some recipes in deployment section can make HMR works out of the box, those are includes: Laravel (with Laravel UI)Create React AppViteNext.jsSvelteKit Combined with VSCode SSH Remote, it can function as close to local development in the cloud (like CodeSandbox or Github's Codespaces). "},{"title":"Ephemeral Ports​","type":1,"pageTitle":"Services","url":"/docs/features/service#ephemeral-ports","content":"Most ports are blocked except ephemeral ports (32768 - 65535). You can use them for local development inside the server, including running a custom TCP listener without going though NGINX. Please note that long-running background processes are not allowed in the server. It will be killed automatically. caution DOM Cloud is a shared hosting in nature, so other people might stumble across your randomly assigned ports (incoming traffic from ports can't be divided by domain name unlike if it's going through NGINX). Never put any sensitive data if it's mean for development. tip To automatically run with server public IP and random ports, use syntax like this: npm run dev -- --host `hostname -I | cut -d &quot; &quot; -f1` --port `shuf -n 1 -i 49152-65535`  "},{"title":"Memory Sharing​","type":1,"pageTitle":"Services","url":"/docs/features/service#memory-sharing","content":"Any application run through Passenger will be spawned into multiple processes. If you save data through memory (i.e. saving some data into global variables) it won't work consistently, you have to save it either in file or database. If you want performant cache storage, look for other platform. Some of them may grant free Redis storage. Just make sure the cluster is in same region with what you use in DOM Cloud. "},{"title":"Managing File Storage​","type":1,"pageTitle":"Services","url":"/docs/features/service#managing-file-storage","content":"If you need to delete unnecessary files in one of your hosts, use ncdu. It's a disk usage analyzer available in all servers.  "},{"title":"Installed PHP Extensions​","type":1,"pageTitle":"Services","url":"/docs/features/service#installed-php-extensions","content":"PHP are installed as system wide. It's installed as in these commands: yum install {php74,php80,php81,php82}-php-{bcmath,cli,common,devel,fpm,gd,intl,mbstring,mysqlnd,opcache,pdo,pecl-mongodb,pecl-redis,pecl-zip,pgsql,process,sodium,soap,xml}  Here's the list of extensions available:  bcmath\tbz2\tcalendar\tCore\tctype\tcurl date\tdom\texif\tfileinfo\tfilter\tftp gd\tgettext\thash\ticonv\tigbinary\tintl json\tlibxml\tmbstring\tmongodb\tmsgpack\tmysqli mysqlnd\topenssl\tpcntl\tpcre\tPDO\tpdo_mysql pdo_pgsql\tpdo_sqlite\tpgsql\tPhar\tposix\trandom readline\tredis\tReflection\tsession\tshmop\tSimpleXML soap\tsockets\tsodium\tSPL\tsqlite3\tstandard sysvmsg\tsysvsem\tsysvshm\ttokenizer\txml\txmlreader xmlwriter\txsl\tZend OPcache\tzip\tzlib\t Custom extensions can't be installed as it's a shared hosting. However, you can download PHP yourself and attach it to Nginx via Passenger and FastCGI. "},{"title":"Virtualmin and Webmin","type":0,"sectionRef":"#","url":"/docs/features/virtualmin","content":"","keywords":""},{"title":"Manage servers with Virtualmin Panel​","type":1,"pageTitle":"Virtualmin and Webmin","url":"/docs/features/virtualmin#manage-servers-with-virtualmin-panel","content":"The Virtualmin Panel gives you ability to manage files, subservers and databases. Here are an introduction video to demonstrate its UI features.  "},{"title":"Integration","type":0,"sectionRef":"#","url":"/docs/integration/","content":"Integration","keywords":""},{"title":"Custom Domain","type":0,"sectionRef":"#","url":"/docs/integration/cname","content":"Custom Domain TODO","keywords":""},{"title":"GitHub Integration","type":0,"sectionRef":"#","url":"/docs/integration/github","content":"GitHub Integration TODO","keywords":""},{"title":"Visual Studio Code","type":0,"sectionRef":"#","url":"/docs/integration/vscode","content":"Visual Studio Code TODO","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/intro/","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#getting-started","content":"First time here? Get understand and set up your own website quicky by reading the Getting Started page. "},{"title":"What is DOM Cloud? And why?​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#what-is-dom-cloud-and-why","content":"DOM Cloud is a cloud hosting solution that allows you to host your website on our servers. While we are much like other cloud providers seen from above, we are pretty much different in many ways: We don't serve your website using containers nor serverless functions, we just give you raw access to a non-sudo user in our servers. That's why we call ourself Cloud hosting solution.But unlike those other &quot;hosting solutions&quot;, we want you to have better tooling; for example, with our platform you can sync with GitHub every push, just like other modern cloud providers there.If you use our platform, we want you to get the most benefit of raw access to our servers, for example with SSH you can also open Visual Studio Code with remote SSH so you can do awesome things, like cloud working environment for example. "},{"title":"Our Philosophy​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#our-philosophy","content":"We want students, teachers, developers with their hobby time make use of our platform for a better experience with putting things online. Personally, the reason I created this because I once struggled to find a host service that's good enough for a university project. That's just a reasoning and we have a separate page to read more about our philosophy. Check it out! I recommend you to read it first so you can have a better view of what we're trying to do and not to do. "},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#features","content":"Let's sump up the key benefits of DOM Cloud starting from what you see in our landing page: "},{"title":"Portal Toolbox​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#portal-toolbox","content":"We have tools, many of them, and they have their own separate pages. Web-Based ToolsVirtualminRunnerVisual Studio CodeGitHub Integration "},{"title":"Server Services​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#server-services","content":"Inside the server we have many daemon services running: NGINX (HTTP Proxy)Passenger Phusion (Runtime Manager)PHP-FPM (PHP Runtime Manager)SSL (HTTPS Certbot)DNS (Name Daemon Server)Firewall (Whitelist) "},{"title":"Language Compilers Support​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#language-compilers-support","content":"We host a range of code language support and they have separate guides pages. PHPNode.jsPythonRubyOther languages "},{"title":"Database Instance Support​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#database-instance-support","content":"We support MariaDB (MySQL), PostgreSQL, and SQLite. Well, who doesn't support SQLite? MariaDBPostgreSQL "},{"title":"Other Pages​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#other-pages","content":"(TODO) Some pages are dedicated to other things, like: Set up custom domainSet up subdomainTroubleshooting "},{"title":"Tips and Troubleshooting","type":0,"sectionRef":"#","url":"/docs/integration/troubleshoot","content":"","keywords":""},{"title":"Common Tips and Good Practices​","type":1,"pageTitle":"Tips and Troubleshooting","url":"/docs/integration/troubleshoot#common-tips-and-good-practices","content":"Portal​ The runner script is available as the alternative way to manage things in Virtualmin, even for things that didn't available there, like configuring NGINX or Firewall.The runner script is capable to be triggered with GitHub Actions CI, useful for auto-syncing host code with GitHub repo.We don't serve email transactions, however you can use third-party NGINX​ Use ssl: enforce to redirect all insecure traffic to secure one.NGINX alone is capable of creating E-Tag cache to speed up static files delivery.If you use Cloudflare, and you happen to get infinite redirection, please turn off the SSL proxy in Cloudflare.We have built-in bursted rate-limit of 50 requests for 3 requests/seconds in each IP address. PHP-FPM​ You can choose PHP version either from Virtualmin or runner script.To configure php.ini, create .user.ini file in the public root path.Default upload size is 8MB, increase it by set upload_max_filesize and post_max_size in php.ini.Any fatal error in PHP will result in blank 500 error. You can enable error reporting by set display_errors to 1 in php.ini, but this is not recommended.When installing depedencies with composer, use --no-cache to avoid wasted storage by caches. Python​ python and pip is referred as latest Python 3. We have no support of Python 2.When installing depedencies with pip, always use --user otherwise you will get install error because of sudo requirements. Passenger Phusion​ Passenger Phusion Node.js looks for app.js, passenger_wsgi.py or config.ru in parent of root path to start the app.The GLS feature from Passenger Phusion can start any app, even binary files, provided you pass $PORT correctly.Passenger Phusion Node.js works with CJS. If your project use ESM you need to use GLS.Passenger Phusion will be activated if passenger_enabled on and no files present in destination path.You can tell if Phusion is serving a file by checking server: nginx + Phusion Passenger HTTP header.Static files is often better to be handled within NGINX alone to make use of E-Tag cache.You can add environment variables by writing in ~/.env (and use commands like this: export NODE_ENV=production) "},{"title":"Common Errors Troubleshooting​","type":1,"pageTitle":"Tips and Troubleshooting","url":"/docs/integration/troubleshoot#common-errors-troubleshooting","content":"For PHP, Error logs is available in error logs provided by Virtualmin. For Non-PHP (via Phusion Passenger), error logs is not available but if your app is failed to start up, a nice detailed explanation for the crash is available. Website down ERR_NAME_NOT_RESOLVED​ This means that there is a problem with the DNS system. If you are using DOM Cloud make sure: Has fulfilled the requirements / required documents (including email confirmation) from the Registrar.Already pointing the Name Server correctly (scroll up if not already).The DNS feature for the server is turned on (set up via webmin).The A / CNAME records for the intended domain are correct. You can contact us if it is still not correct. HTTPS Error ERR_CERT_AUTHORITY_INVALID​ This means that your SSL certificate has not been set or has expired. To update it please scroll up. If you encounter ERR_CERTIFICATE_TRANSPARENCY_REQUIRED after an SSL update, you don't need to panic because of an error due to cache and it will disappear in a few minutes. NGINX Error 403 Forbidden page​ This means that NGINX cannot access the file due to a linux mode setting error in the file. In order to fix this easily you can run this on SSH: bash chmod -R 750 ~/ NGINX Error page 404 Found​ There are 2 possibilities: If this happens for all page URLs, chances are you forgot to set NGINX to setup index.php or turn on passenger mode for non-PHP.If this happens for only a few files, there may be errors such as typo in the URL, wrong Base URL or not paying attention to the file name size. Blank page HTTP Error 500​ This means that there is an error in your PHP, but unlike XAMPP, PHP by default will not raise an error on the website. You have 2 options for viewing the error: Via Webmin &gt; Logs and Reports &gt; NGINX Error LogSet in .user.ini: display_errors = On NGINX Error 502 Bad Gateway page​ It is possible that the file you uploaded is too large or the PHP script you are running is taking too long. You can fix this via .user.ini file. &quot;Connection Refused&quot; from server HTTP request​ You need to turn off the firewall. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/intro/getting-started","content":"","keywords":""},{"title":"System Architecture​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#system-architecture","content":"DOM Cloud system is based on a monolithic web server. Everything is managed under a Linux system that everyone have an access to through their own userland data. Let's talk about our system architecture starting from this diagram:  There's a lot to unpack! Don't worry, we'll get through that by reading below. "},{"title":"System Daemon vs. Userland​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#system-daemon-vs-userland","content":"If you have some experience with Linux you should understand this concept already. A system daemon is all system processes that run under root user, which has privilenges of controlling everything in the system. A userland is user processes that locked under a constraint of given Linux user. You (as a admin of your own website) is only given a userland access. This mean you're able to upload files, databases, and apps under your own user, and that's it. We can't give you the full &quot;system&quot; daemon because the system is shared with other users. Of course, some setup still requires root acccess. For instance, a proxy daemon (NGINX) need to know &quot;you&quot; and your domain so it can forward internet traffic through your apps. This is done mainly through Runner, the core feature of our service. "},{"title":"Runner​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#runner","content":"The Runner is the way to configure things in the system. It's a web-based tool that allows you to configure your website, like adding a domain, adding a database, and adding a web app. It's also the way to configure the system daemon, like adding a proxy, adding a firewall, and adding a DNS. You can read more about Runner in the Runner page. For now, let's keep focus on how to setup your own website. "},{"title":"Create a Website​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#create-a-website","content":"Go to create a website page. If you haven't logged in, you will be redirected to the login page. Below is the screenshot of that page.   The left side is the template you want to start with, while the right side sets the domain name and the server where you want to host your website. You can choose a template, the domain name and a server, then click the &quot;Add Host&quot; button. We explain more below. "},{"title":"Right side​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#right-side","content":"It has three fields: Username, Region, and Domain. Username​ This is the username you want to use to login to your website. You can use any username you want, but it must be unique. The username is invisible to the public, except if you choose a free domain. Region​ This is the server where you want to host your website. You can choose any server you want that is available, preferably close with your target audience. Domain​ This is the domain name you want to use for your website. By default, it will be [username].domcloud.io, which is part of a free domain name provided by us. info You can also use your own domain name, but you need to configure it first. Read more about Custom Domain. "},{"title":"Left side​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#left-side","content":"It's a template selector. It has three sections: Start From Template, Clone From GitHub, Custom Template. Start From Template​ The template is a pre-configured website that you can use as a starting point. It's mostly a preconfigured web apps that works out of the box. Clone From GitHub​ For some developers who already have the website code on GitHub, you can clone it directly to DOM Cloud. It will ask for GitHub access so it can clone your repository even if it's private. info If you plan to integrate our service with GitHub, there's so much more about it. Read more about GitHub integration. Custom Template​ This is the &quot;template&quot; that will be executed in the runner after the website has been created. When you choose option from Start From Template or Clone From GitHub, it will be automatically set to the template that is used by the selected option. "},{"title":"Click \"Add Host\"​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#click-add-host","content":"After clicking the &quot;Add Host&quot; button, you will be redirected to the runner page of the newly created website where you can watch the progress of the setup. Below is the screenshot of that page.   If you keep watching the page there will be a message saying &quot;Your website is ready!&quot; and a button to open the website when it's ready. "},{"title":"Managing Website​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#managing-website","content":"Every website has its own dashboard. Below is the screenshot of that page.   One thing to note is that it has many tabs. One particular useful tab that you'll use often is the Manage tab. It contains links to edit your website and also credentials to access your website. Below is the screenshot of that page.   Tools that you can use to manage your website are: Webmin​ Webmin is a web-based system management tool. It's mostly useful for managing files using a web interface. You can also use that to manage your databases (like adding new databases or importing from server files). PhpMyAdmin / PhpPgAdmin​ PhpMyAdmin and PhpPgAdmin is a web-based database management tool for MariaDB and PostgreSQL, respectively. During entry, you will be asked for the database username and password, which is the same as your website username and password (in Manage tab). info If you have problem accessing the database, you need to enable the database first through the Runner. Read more about Configuring Databases.  WebSSH​ WebSSH is a web-based SSH client. It's useful for advanced installation that requires CLI access. danger The WebSSH URL contains password in your URL for convenience. Don't open it on a shared computer. Open the link from the dropdown menu instead (which clears password in the URL). Visual Studio Code​ This a link to VS code to remotely edit the website via SSH. It's required to have the VS code installed on your computer. During entry, you will be asked for the SSH password, which is the same as your website password. tip You can open the website in VS code in a particular directory to avoid clutter by opening the link from the dropdown menu. "},{"title":"Other things to aware​","type":1,"pageTitle":"Getting Started","url":"/docs/intro/getting-started#other-things-to-aware","content":"This section covers advanced concepts that you need to know to use DOM Cloud. Refer back to our architecture system diagram for overall overview. Firewall Daemon and PortsProxy and App DaemonDatabase DaemonDNS DaemonSystem RunnerWebmin and Virtualmin There's also a dedicated page for configuring a website for specific code language such as PHP, Node.JS, Python or with many CMS platforms or with many static page generator and so on. And also a dedicated page for integration with GitHub, VS Code, third-party custom domain, and soon. "},{"title":"Our Philosophy","type":0,"sectionRef":"#","url":"/docs/intro/philosophy","content":"","keywords":""},{"title":"Drawbacks​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#drawbacks","content":""},{"title":"1. Not Scalable​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#1-not-scalable","content":"Roughly saying, a system can be defined as scalable if it can handle a large number of users, say, hundred thousands of visitor every day; or it's targeted for worldwide audience and visitor wouldn't worry about latency wherever they are. Honestly, our platform don't solves both problem, because it's monolithic (single point of server) by design. We have to admit there are other better cloud providers that gives scalability for free, especially with static websites. But for other websites that need a backend code, it's way too complex. So far we (the world) have three solutions for scalability (what I know, so far) (Be warned, it's very technical): Serverless Functions. They're small function represents small pieces of code that can be deployed globally using e.g. AWS Lambda. The problem with that, not every framework can be chunked into small functions (e.g. WordPress and Laravel). Some people with brilliant idea might can turn some existing framework to fit into serverless functions, but I think it's complexity outweights the benefits if you don't look for scalability. Container and Kubernetes. Kubernetes leverages containers which is about running a server code in an isolated environments. Kubernetes are software managers that clones and kills containers whenever they are needed. With that said, Kubernetes is a bit more complex than serverless functions. Also, you would have to mind the other things to ensure scalability like using Redis instead simple files for cache (e.g. for handling cookie/sessions). You would still have a lot of refactoring to do if the language isn't scalable by default (WordPress still can't do that), but still it's a lot easier than serverless functions. Use of No-SQL databases. There are recent trends about GraphQL and NoSQL databases, and they're so scalable you can get rid of writing a backend code (provided with correct permissions to ensure security). A popular example for this is when developers create an Android App, mostly they use Firebase for the backend. Firebase already handles most backend aspect ranging from authentication, storage, analytics, to realtime database; This is also true for other services. The downside is that you have to consider this option since beginning, or risk rewriting everything from scratch. You also creates a direct depedency on a service for a major part of your application, and risk major refactor if you want to change from that later. Those 3 points are actually no problem if you (or your company) has a lot resources to outweight the cost of scalability. So, whether you're flying solo or with a (small) team, and not trying to compete on Facebook, Spotify, FedEx or any other global companies, then you might not need scalability, which this platform is designed for. "},{"title":"2. Fair Usage Limit​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#2-fair-usage-limit","content":"We given users a raw access (SSH) to the server, so they can do whatever they want with it. Practically, one can run a Jupyter Notebook on the server (we even provide a recipe for this). A website relates to Machine Learning (ML) research may still be allowed to be hosted here, but under condition: It shouldn't take a lot of RAM/CPU usage. We don't measure RAM/CPU usage because it's nature, but we still draw a line for fair usage. We have an alert system if the CPU usage is too high continously. If it does happen, we have to kill the process forcibly so it doesn't impact other websites for too long. We could terminate an account if it comes again repeatedly. The same thing goes for crypto, phising, DoS, and other malicious activities, which clearly against the service of terms we have here. If your website has too much traffic, memory or CPU usage, but your website is legitimate, we may contact you so we can take an alternate agreement such that your website resource usage doesn't impact other websites. "},{"title":"3. No Guarantee​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#3-no-guarantee","content":"By design of monolithic system, or a single server point for a website, we don't provide any guarantee that your website will stay up most of time. We do have a uptime status monitoring system, but when a downtime occurred, it's inevitable. If your website runs for a mission critical project, you might need to take a look for alternate cloud provider that guarantees uptime and scalability. "},{"title":"Benefit​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#benefit","content":"If you don't mind about scalability, a classic monolithic system like our platform is a good choice for you. Here's why: "},{"title":"1. Local File Access​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#1-local-file-access","content":"Local file access is often underrated in today's cloud computing world. The reason you wouldn't see people running PHP inside containers often is because this language is heavily depends with local file operations (e.g. for sessions and file uploads). Also, it's the simplest way to cache and store data. If you're not choosing to be monolithic then you would have take alternative solutions like Redis or Memcached for cache and S3 storages for file uploads. "},{"title":"2. Incremental Build​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#2-incremental-build","content":"If you have particularly large packages depedency, this will help you a lot. Unlike standard CI/CD, when you do e.g. npm install, the existing node_modules will not be cleared, thus speeding up the overall build time. "},{"title":"3. Simple Hot Fixes​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#3-simple-hot-fixes","content":"If you spot a bug in production, you have the option to fix it directly by editing the live server. This may risky and inconvenient for large sites. But for those who with little technical human resources, it greatly simplifies the process of bug fixing. When things cooling down, one can see the diff and then reapply a proper fix to stream (git) repository. "},{"title":"4. As close as running locally​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#4-as-close-as-running-locally","content":"We provide a local development environment that's as close as running locally. If you or your developer has a familiarity with Linux, practically it should be easy to manage the server. "},{"title":"Support​","type":1,"pageTitle":"Our Philosophy","url":"/docs/intro/philosophy#support","content":"Currently, DOM Cloud run as a service for community. Core developer resources is minimal but we strive to make this platform autonomous and easy to use. You welcome to ask in the discussion forum or emails. "}]